package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/helper/common"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _validators, _stakedAmount
	// Index for regular types is calculated as just the regular slot
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
)

const (
	DefaultStakedBalance = "0xA" // 10 Wei
	//nolint: lll
	StakingSCBytecode = "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063889d0525116100b8578063ca1e78191161007c578063ca1e781914610378578063e387a7ed14610396578063e804fbf6146103b4578063e849268d146103d2578063f90ecacc14610402578063facd743b1461043257610137565b8063889d0525146102c057806394067045146102f0578063af6da36e14610320578063c795c0771461033e578063c9a3911e1461035c57610137565b80635dbe4756116100ff5780635dbe47561461021a5780636588103b14610236578063714ff425146102545780637a6eea37146102725780637dceceb81461029057610137565b806302b751991461013c578063065ae1711461016c5780630e1af57b1461019c5780632367f6b5146101cc578063373d6132146101fc575b600080fd5b6101566004803603810190610151919061163c565b610462565b6040516101639190611b0d565b60405180910390f35b6101866004803603810190610181919061163c565b61047a565b60405161019391906119dc565b60405180910390f35b6101b660048036038101906101b191906116f6565b61049a565b6040516101c39190611b0d565b60405180910390f35b6101e660048036038101906101e1919061163c565b6104c3565b6040516101f39190611b0d565b60405180910390f35b61020461050c565b6040516102119190611b0d565b60405180910390f35b610234600480360381019061022f9190611696565b610516565b005b61023e610608565b60405161024b91906119f7565b60405180910390f35b61025c61062e565b6040516102699190611b0d565b60405180910390f35b61027a610638565b6040516102879190611af2565b60405180910390f35b6102aa60048036038101906102a5919061163c565b61063d565b6040516102b79190611b0d565b60405180910390f35b6102da60048036038101906102d5919061163c565b610655565b6040516102e79190611b0d565b60405180910390f35b61030a600480360381019061030591906116f6565b61066d565b6040516103179190611944565b60405180910390f35b6103286106a0565b6040516103359190611b0d565b60405180910390f35b6103466106a6565b6040516103539190611b0d565b60405180910390f35b61037660048036038101906103719190611696565b6106ac565b005b61038061071c565b60405161038d9190611996565b60405180910390f35b61039e6107aa565b6040516103ab9190611b0d565b60405180910390f35b6103bc6107b0565b6040516103c99190611b0d565b60405180910390f35b6103ec60048036038101906103e7919061163c565b6107ba565b6040516103f99190611b0d565b60405180910390f35b61041c600480360381019061041791906116f6565b610803565b6040516104299190611944565b60405180910390f35b61044c6004803603810190610447919061163c565b610842565b60405161045991906119dc565b60405180910390f35b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000806003836104aa9190611d29565b905060008114156104ba57600390505b80915050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600454905090565b6105353373ffffffffffffffffffffffffffffffffffffffff16610898565b15610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611ab2565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee90611a32565b60405180910390fd5b610603338484846108bb565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b600181565b60026020528060005260406000206000915090505481565b60096020528060005260406000206000915090505481565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60055481565b6106cb3373ffffffffffffffffffffffffffffffffffffffff16610898565b1561070b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070290611ab2565b60405180910390fd5b61071733848484610c92565b505050565b606060008054806020026020016040519081016040528092919081815260200182805480156107a057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610756575b5050505050905090565b60045481565b6000600654905090565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000818154811061081357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b82829050811015610c23576000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390611a12565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16600860008585858181106109ba576109b9611de7565b5b90506020020135815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a1057600080fd5b600060086000858585818110610a2957610a28611de7565b5b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3087868686818110610acf57610ace611de7565b5b905060200201356040518463ffffffff1660e01b8152600401610af49392919061195f565b600060405180830381600087803b158015610b0e57600080fd5b505af1158015610b22573d6000803e3d6000fd5b505050506000610b4a848484818110610b3e57610b3d611de7565b5b9050602002013561049a565b9050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b9c90611cb6565b919050555060046000815480929190610bb490611cb6565b919050555080600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c089190611bd9565b92505081905550508080610c1b90611ce0565b9150506108ff565b50610c2d33611093565b15610c3c57610c3b336110e9565b5b8373ffffffffffffffffffffffffffffffffffffffff167f20748b935fd9f21155c2e98cb2bd5df6fe86f21b193cebaae8d9ad7db0ba54168383604051610c849291906119b8565b60405180910390a250505050565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b82829050811015611024578473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e858585818110610d4957610d48611de7565b5b905060200201356040518263ffffffff1660e01b8152600401610d6c9190611b0d565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc9190611669565b73ffffffffffffffffffffffffffffffffffffffff1614610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990611a92565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630868686818110610e6557610e64611de7565b5b905060200201356040518463ffffffff1660e01b8152600401610e8a9392919061195f565b600060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505050508460086000858585818110610ed457610ed3611de7565b5b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000610f4b848484818110610f3f57610f3e611de7565b5b9050602002013561049a565b905060046000815480929190610f6090611ce0565b9190505550600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610fb590611ce0565b919050555080600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110099190611b83565b9250508190555050808061101c90611ce0565b915050610cd6565b5061102e336113e7565b1561103d5761103c33611458565b5b8373ffffffffffffffffffffffffffffffffffffffff167f134b166c6094cc1ccbf1e3353ce5c3cd9fd29869051bdb999895854d77cc5ef683836040516110859291906119b8565b60405180910390a250505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60055460008054905011611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990611ad2565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106111b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af90611a72565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000805490506112109190611bd9565b90508082146112fe57600080828154811061122e5761122d611de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600084815481106112705761126f611de7565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054806113ad576113ac611db8565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60006113f282611093565b158015611451575060016fffffffffffffffffffffffffffffffff16600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b600654600080549050106114a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149890611a52565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506115b681611fc5565b92915050565b6000815190506115cb81611fc5565b92915050565b60008083601f8401126115e7576115e6611e1b565b5b8235905067ffffffffffffffff81111561160457611603611e16565b5b6020830191508360208202830111156116205761161f611e20565b5b9250929050565b60008135905061163681611fdc565b92915050565b60006020828403121561165257611651611e2f565b5b6000611660848285016115a7565b91505092915050565b60006020828403121561167f5761167e611e2f565b5b600061168d848285016115bc565b91505092915050565b6000806000604084860312156116af576116ae611e2f565b5b60006116bd868287016115a7565b935050602084013567ffffffffffffffff8111156116de576116dd611e25565b5b6116ea868287016115d1565b92509250509250925092565b60006020828403121561170c5761170b611e2f565b5b600061171a84828501611627565b91505092915050565b600061172f838361173b565b60208301905092915050565b61174481611c0d565b82525050565b61175381611c0d565b82525050565b600061176482611b38565b61176e8185611b50565b935061177983611b28565b8060005b838110156117aa5781516117918882611723565b975061179c83611b43565b92505060018101905061177d565b5085935050505092915050565b60006117c38385611b61565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156117f6576117f5611e2a565b5b602083029250611807838584611ca7565b82840190509392505050565b61181c81611c1f565b82525050565b61182b81611c71565b82525050565b600061183e601983611b72565b915061184982611e34565b602082019050919050565b6000611861601d83611b72565b915061186c82611e5d565b602082019050919050565b6000611884602783611b72565b915061188f82611e86565b604082019050919050565b60006118a7601283611b72565b91506118b282611ed5565b602082019050919050565b60006118ca602183611b72565b91506118d582611efe565b604082019050919050565b60006118ed601a83611b72565b91506118f882611f4d565b602082019050919050565b6000611910604083611b72565b915061191b82611f76565b604082019050919050565b61192f81611c2b565b82525050565b61193e81611c67565b82525050565b6000602082019050611959600083018461174a565b92915050565b6000606082019050611974600083018661174a565b611981602083018561174a565b61198e6040830184611935565b949350505050565b600060208201905081810360008301526119b08184611759565b905092915050565b600060208201905081810360008301526119d38184866117b7565b90509392505050565b60006020820190506119f16000830184611813565b92915050565b6000602082019050611a0c6000830184611822565b92915050565b60006020820190508181036000830152611a2b81611831565b9050919050565b60006020820190508181036000830152611a4b81611854565b9050919050565b60006020820190508181036000830152611a6b81611877565b9050919050565b60006020820190508181036000830152611a8b8161189a565b9050919050565b60006020820190508181036000830152611aab816118bd565b9050919050565b60006020820190508181036000830152611acb816118e0565b9050919050565b60006020820190508181036000830152611aeb81611903565b9050919050565b6000602082019050611b076000830184611926565b92915050565b6000602082019050611b226000830184611935565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611b8e82611c67565b9150611b9983611c67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bce57611bcd611d5a565b5b828201905092915050565b6000611be482611c67565b9150611bef83611c67565b925082821015611c0257611c01611d5a565b5b828203905092915050565b6000611c1882611c47565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611c7c82611c83565b9050919050565b6000611c8e82611c95565b9050919050565b6000611ca082611c47565b9050919050565b82818337600083830152505050565b6000611cc182611c67565b91506000821415611cd557611cd4611d5a565b5b600182039050919050565b6000611ceb82611c67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d1e57611d1d611d5a565b5b600182019050919050565b6000611d3482611c67565b9150611d3f83611c67565b925082611d4f57611d4e611d89565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f596f752068617665206e6f20746f6b656e73207374616b656400000000000000600082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f43616e2774207374616b6520746f6b656e7320796f7520646f6e2774206f776e60008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b611fce81611c0d565b8114611fd957600080fd5b50565b611fe581611c67565b8114611ff057600080fd5b5056fea264697066735822122066e869041e91ac625c8da4c5aa48494fad1966b76029dd37cc34ed5c99aad02b64736f6c63430008070033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	validators []types.Address,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))

	for indx, validator := range validators {
		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}

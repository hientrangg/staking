package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/helper/common"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _validators, _stakedAmount
	// Index for regular types is calculated as just the regular slot
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
)

const (
	DefaultStakedBalance = "0xA" // 10 Wei
	//nolint: lll
	StakingSCBytecode = "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063adc9772e116100a2578063ca1e781911610071578063ca1e7819146102f7578063e387a7ed14610315578063e804fbf614610333578063f90ecacc14610351578063facd743b1461038157610116565b8063adc9772e14610283578063af6da36e1461029f578063c2a672e0146102bd578063c795c077146102d957610116565b80636588103b116100e95780636588103b146101c9578063714ff425146101e75780637a6eea37146102055780637dceceb814610223578063940670451461025357610116565b806302b751991461011b578063065ae1711461014b5780632367f6b51461017b578063373d6132146101ab575b600080fd5b610135600480360381019061013091906112cd565b6103b1565b60405161014291906116fe565b60405180910390f35b610165600480360381019061016091906112cd565b6103c9565b60405161017291906115cd565b60405180910390f35b610195600480360381019061019091906112cd565b6103e9565b6040516101a291906116fe565b60405180910390f35b6101b3610432565b6040516101c091906116fe565b60405180910390f35b6101d161043c565b6040516101de91906115e8565b60405180910390f35b6101ef610462565b6040516101fc91906116fe565b60405180910390f35b61020d61046c565b60405161021a91906116e3565b60405180910390f35b61023d600480360381019061023891906112cd565b610471565b60405161024a91906116fe565b60405180910390f35b61026d60048036038101906102689190611367565b610489565b60405161027a9190611559565b60405180910390f35b61029d60048036038101906102989190611327565b6104bc565b005b6102a761052a565b6040516102b491906116fe565b60405180910390f35b6102d760048036038101906102d29190611327565b610530565b005b6102e1610620565b6040516102ee91906116fe565b60405180910390f35b6102ff610626565b60405161030c91906115ab565b60405180910390f35b61031d6106b4565b60405161032a91906116fe565b60405180910390f35b61033b6106ba565b60405161034891906116fe565b60405180910390f35b61036b60048036038101906103669190611367565b6106c4565b6040516103789190611559565b60405180910390f35b61039b600480360381019061039691906112cd565b610703565b6040516103a891906115cd565b60405180910390f35b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600454905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b600181565b60026020528060005260406000206000915090505481565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104db3373ffffffffffffffffffffffffffffffffffffffff16610759565b1561051b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610512906116a3565b60405180910390fd5b61052633838361077c565b5050565b60065481565b61054f3373ffffffffffffffffffffffffffffffffffffffff16610759565b1561058f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610586906116a3565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890611623565b60405180910390fd5b61061c338383610a90565b5050565b60055481565b606060008054806020026020016040519081016040528092919081815260200182805480156106aa57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610660575b5050505050905090565b60045481565b6000600654905090565b600081815481106106d457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161082f91906116fe565b60206040518083038186803b15801561084757600080fd5b505afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f91906112fa565b73ffffffffffffffffffffffffffffffffffffffff16146108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc90611683565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8430846040518463ffffffff1660e01b815260040161093493929190611574565b600060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b50505050826008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008154809291906109cb9061185b565b9190505550600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610a209061185b565b9190505550610a2e33610d7a565b15610a3d57610a3c33610deb565b5b8273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82604051610a8391906116fe565b60405180910390a2505050565b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611603565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bbe57600080fd5b60006008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3085846040518463ffffffff1660e01b8152600401610c7093929190611574565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610cf290611831565b919050555060046000815480929190610d0a90611831565b9190505550610d1833610f3a565b15610d2757610d2633610f90565b5b8273ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7582604051610d6d91906116fe565b60405180910390a2505050565b6000610d8582610f3a565b158015610de4575060016fffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b60065460008054905010610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b90611643565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60055460008054905011610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd0906116c3565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105690611663565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000805490506110b79190611763565b90508082146111a55760008082815481106110d5576110d4611902565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000848154811061111757611116611902565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000805480611254576112536118d3565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60008135905061129d81611ac7565b92915050565b6000815190506112b281611ac7565b92915050565b6000813590506112c781611ade565b92915050565b6000602082840312156112e3576112e2611931565b5b60006112f18482850161128e565b91505092915050565b6000602082840312156113105761130f611931565b5b600061131e848285016112a3565b91505092915050565b6000806040838503121561133e5761133d611931565b5b600061134c8582860161128e565b925050602061135d858286016112b8565b9150509250929050565b60006020828403121561137d5761137c611931565b5b600061138b848285016112b8565b91505092915050565b60006113a083836113ac565b60208301905092915050565b6113b581611797565b82525050565b6113c481611797565b82525050565b60006113d582611729565b6113df8185611741565b93506113ea83611719565b8060005b8381101561141b5781516114028882611394565b975061140d83611734565b9250506001810190506113ee565b5085935050505092915050565b611431816117a9565b82525050565b611440816117fb565b82525050565b6000611453601983611752565b915061145e82611936565b602082019050919050565b6000611476601d83611752565b91506114818261195f565b602082019050919050565b6000611499602783611752565b91506114a482611988565b604082019050919050565b60006114bc601283611752565b91506114c7826119d7565b602082019050919050565b60006114df602183611752565b91506114ea82611a00565b604082019050919050565b6000611502601a83611752565b915061150d82611a4f565b602082019050919050565b6000611525604083611752565b915061153082611a78565b604082019050919050565b611544816117b5565b82525050565b611553816117f1565b82525050565b600060208201905061156e60008301846113bb565b92915050565b600060608201905061158960008301866113bb565b61159660208301856113bb565b6115a3604083018461154a565b949350505050565b600060208201905081810360008301526115c581846113ca565b905092915050565b60006020820190506115e26000830184611428565b92915050565b60006020820190506115fd6000830184611437565b92915050565b6000602082019050818103600083015261161c81611446565b9050919050565b6000602082019050818103600083015261163c81611469565b9050919050565b6000602082019050818103600083015261165c8161148c565b9050919050565b6000602082019050818103600083015261167c816114af565b9050919050565b6000602082019050818103600083015261169c816114d2565b9050919050565b600060208201905081810360008301526116bc816114f5565b9050919050565b600060208201905081810360008301526116dc81611518565b9050919050565b60006020820190506116f8600083018461153b565b92915050565b6000602082019050611713600083018461154a565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061176e826117f1565b9150611779836117f1565b92508282101561178c5761178b6118a4565b5b828203905092915050565b60006117a2826117d1565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118068261180d565b9050919050565b60006118188261181f565b9050919050565b600061182a826117d1565b9050919050565b600061183c826117f1565b915060008214156118505761184f6118a4565b5b600182039050919050565b6000611866826117f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611899576118986118a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f596f752068617665206e6f20746f6b656e73207374616b656400000000000000600082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f43616e2774207374616b6520746f6b656e7320796f7520646f6e2774206f776e60008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b611ad081611797565b8114611adb57600080fd5b50565b611ae7816117f1565b8114611af257600080fd5b5056fea26469706673582212207e79e5b23e79911e5f4d1fe30edf0c4f0fed88a97689ec834316487e30b7f8ab64736f6c63430008070033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	validators []types.Address,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))

	for indx, validator := range validators {
		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
